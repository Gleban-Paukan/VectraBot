import time
import sys
import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from datetime import datetime, timedelta
from telebot import types
from requests import ReadTimeout
import os
import data_base_functions
import config
import text_messages_storage

bot = telebot.TeleBot(config.first_bot_token())
bot.parse_mode = 'html'

jobstores = {
    'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')
}
scheduler = BackgroundScheduler(jobstores=jobstores)
scheduler.start()


@bot.message_handler(commands=['start'])
def start_message_handler(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_of_registration"))
    markup.add(
        types.InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–ª—É–±–µ", callback_data="additional_club_information"),
        types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ –∫–ª—É–±–∞", callback_data="club_rules"),
        types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="ZAGLUSHKA"),  # TODO
        types.InlineKeyboardButton(text="–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç", url="https://vektragroup.ru/")
    )

    bot.send_message(message.chat.id, text_messages_storage.message_definer(1), reply_markup=markup)
    data_base_functions.SQLiteUser(message.chat.id, message.from_user.username)


@bot.message_handler(content_types=['location'])
def handle_location(message):
    scheduler.remove_job(f"{message.chat.id}_location_remind")
    location = message.location
    lat, long = location.latitude, location.longitude
    user = data_base_functions.SQLiteUser(message.chat.id)
    user.change_position(lat, long)

    remove_markup = types.ReplyKeyboardRemove()
    msg = bot.send_message(message.chat.id,
                           "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞–ª—å–Ω–æ—Å—Ç—å (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö). –ï—ë –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å.",
                           reply_markup=remove_markup)
    bot.register_next_step_handler(msg, set_radius_registration)


@bot.message_handler(content_types=['text'])
def text_message_handler(message):
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã":  # full cringe is coming (sorry, just too lazy)
        try:
            text_to_remind = ("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤?\n"
                              "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º —á—Ç–æ —Ç–∞–º –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º, "
                              "—É—á–∞—Å—Ç–∏–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö, —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤!)\n\n"
                              "–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –æ–ø—ã—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ—Ç–µ–Ω –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –í–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Ç "
                              "–º–æ–Ω—Ç–∞–∂–∞ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞!")
            schedule_reminder(message.chat.id, f"{message.chat.id}_register_confirmation_1_remind", 30, text_to_remind)
            text_to_remind = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç"
            schedule_reminder(message.chat.id, f"{message.chat.id}_register_confirmation_2_remind", 120, text_to_remind)
        except Exception as eerr:
            print(eerr)
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/+wxQ8vd1p-GxhYjFl"))
        markup.add(types.InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription_stage"))
        bot.send_message(
            message.chat.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π Telegram-—á–∞—Ç –∫–ª—É–±–∞, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: "
                             "–∑–∞–∫—Ä—ã—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–∞–º –∏ –∫–≤–æ—Ç–∞–º —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫, –¥–∞–Ω–Ω—ã–µ –æ "
                             "–Ω–∞–ª–∏—á–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.", reply_markup=markup)
    elif message.text == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã"),
                   types.KeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"))
        markup.add(types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"))
        bot.send_message(message.chat.id, "<b>–ó–Ω–∞–∫–æ–º–∏–º –≤–∞—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>")
        typing_action(message.chat.id, 1)
        bot.send_message(message.chat.id, text_messages_storage.message_definer(9))
        typing_action(message.chat.id, 4)
        bot.send_message(message.chat.id, "<b>–ù–æ —ç—Ç–æ –µ—â–µ –Ω–µ –≤—Å–µ! –°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ "
                                          "–≤—ã –ø–æ–ª—É—á–∏—Ç–µ, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏. </b>")
        typing_action(message.chat.id, 5)
        bot.send_message(message.chat.id, text_messages_storage.message_definer(10))
        typing_action(message.chat.id, 1)
        bot.send_message(message.chat.id, "<b>–£–∂–µ –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏? "
                                          "–ê —á—Ç–æ–±—ã –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–º–Ω–µ–Ω–∏—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ–± –∞–∫—Ü–∏—è—Ö –∏"
                                          " –±–æ–Ω—É—Å–∞—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã: </b>")
        typing_action(message.chat.id, 6)
        bot.send_message(message.chat.id, text_messages_storage.message_definer(11), reply_markup=markup)
    elif message.text == "–î–∞–ª–µ–µ":
        scheduler.remove_job(f"{message.chat.id}_location_remind")
        user = data_base_functions.SQLiteUser(message.chat.id)
        user.change_radius(9999)
        typing_action(message.chat.id, 2)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
        bot.send_message(message.chat.id, text_messages_storage.message_definer(6), reply_markup=markup)
    elif message.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
        msg_to_profile(message.chat.id)


@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    user = data_base_functions.SQLiteUser(message.chat.id)
    user.change_phone_number(message.contact.phone_number)
    user_data_text = f"""
<b>üìã –í–∏–¥—ã —Ä–∞–±–æ—Ç:</b> {", ".join(config.define_list_of_jobs_only_useful(user.user_id))}
<b>üèô –ì–æ—Ä–æ–¥:</b> {user.city_name}
<b>üìç –†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã:</b> {"–í—Å—è –†–æ—Å—Å–∏—è" if user.city_name == "–†–æ—Å—Å–∏—è" else user.radius}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}
""" + text_messages_storage.message_definer(7)
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="finish_registration"))
    bot.send_message(message.chat.id, user_data_text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def inline_handler(call):
    deleting_flag = True
    if call.message:
        if call.data == "additional_club_information":
            bot.send_message(call.message.chat.id, "<b>–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–ª—É–±–µ –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤!</b>")
            typing_action(call.message.chat.id, 1)
            bot.send_message(call.message.chat.id, text_messages_storage.message_definer(2))
            typing_action(call.message.chat.id, 5)
            bot.send_message(call.message.chat.id,
                             "<b>–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º,"
                             " –∫–∞–∫–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤</b>")
            typing_action(call.message.chat.id, 3)
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_of_registration"))
            markup.add(types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_start_menu"))
            markup.add(
                types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="ZAGLUSHKA"))  # TODO

            bot.send_message(call.message.chat.id, text_messages_storage.message_definer(3), reply_markup=markup)
        elif call.data == "start_of_registration":
            bot.send_message(call.message.chat.id, "–ï–∂–µ–º–µ—Å—è—á–Ω–æ –º—ã –ø–æ–ª—É—á–∞–µ–º –æ–∫–æ–ª–æ üëâ 5 000 –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –∏ –º–æ–Ω—Ç–∞–∂ "
                                                   "–∑–¥–∞–Ω–∏–π –∏–∑ —Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª–µ–π –ø–ª–æ—â–∞–¥—å—é –æ—Ç 800 –º2.")
            typing_action(call.message.chat.id, 1)
            markup = define_job_markup(call.message.chat.id)
            with open("woman_offer.jpeg", 'rb') as photo:
                bot.send_photo(call.message.chat.id, photo=photo,
                               caption="–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–∏–º –∑–∞–∫–∞–∑–∞–º? <b>–£–∫–∞–∂–∏—Ç–µ "
                                       "–≤–∏–¥—ã —Ä–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ:</b>", reply_markup=markup)
        elif call.data == "next_step_registration":
            msg = bot.send_message(call.message.chat.id, text_messages_storage.message_definer(4))
            text_to_remind = """–ö–∞–∂–µ—Ç—Å—è, –í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞: –∏–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?
–ù–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —á—Ç–æ–±—ã —Å—É–∑–∏—Ç—å –≥–µ–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞–±–æ—Ç, –∫–æ–≥–¥–∞ –º—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–∫–∞–∑"""
            schedule_reminder(msg.chat.id, f"{msg.chat.id}_city_remind", 30, text_to_remind)
            bot.register_next_step_handler(msg, registration_city_defining)
        elif call.data == "back_to_start_menu":
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_of_registration"))
            markup.add(
                types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞ –∫–ª—É–±–∞", callback_data="club_rules"),
                types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="ZAGLUSHKA"),  # TODO
                types.InlineKeyboardButton(text="–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç", url="https://vektragroup.ru/")
            )
            bot.send_message(call.message.chat.id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é", reply_markup=markup)
        elif call.data == "finish_registration":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã"),
                       types.KeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"))
            markup.add(types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"))
            with open("referral_instructions.png", 'rb') as photo:
                bot.send_photo(call.message.chat.id, photo,
                               caption=text_messages_storage.message_definer(8), reply_markup=markup)
            user = data_base_functions.SQLiteUser(call.message.chat.id)
            bot.send_message(call.message.chat.id, text=text_messages_storage.message_definer(16))
        elif call.data == "back_to_profile":
            msg_to_profile(call.message.chat.id)
        elif call.data == "check_subscription_stage":
            if is_user_in_channel(call.message.chat.id, config.id_of_chat_vectra_montajniki()):
                bot.send_message(call.message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                try:  # TODO SORRY FOR POOR CODE
                    scheduler.remove_job(f"{call.message.chat.id}_register_confirmation_2_remind")
                    scheduler.remove_job(f"{call.message.chat.id}_register_confirmation_1_remind")
                except Exception as er:
                    print("Small job conflict, it OK :)", er)
            else:
                bot.answer_callback_query(call.id, "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç.",
                                          show_alert=True)
                deleting_flag = False
        elif "toggle+/+" in call.data:
            job_data = call.data.split("+/+")
            job_name = job_data[1]
            user = data_base_functions.SQLiteUser(call.message.chat.id)
            if user.__getattribute__(job_name):
                user.remove_job_option(job_name)
            else:
                user.add_job_option(job_name)
            if len(job_data) == 2:
                markup = define_job_markup(call.message.chat.id)
            else:
                markup = define_job_markup(call.message.chat.id, job_data[2], False)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=markup)
            deleting_flag = False
        elif "change+/+" in call.data:
            value = call.data.split("+/+")[1]
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
            if value == "job_categories":
                markup = define_job_markup(call.message.chat.id, "back_to_profile", False)
                bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å.",
                                 reply_markup=markup)
            elif value == "city_name":
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:", reply_markup=markup)
                bot.register_next_step_handler(msg, change_city_name)
            elif value == "phone_number":
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7**********:",
                                       reply_markup=markup)
                bot.register_next_step_handler(msg, change_phone_number)
            elif value == "radius":
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, "
                                                             "–∫–æ—Ç–æ—Ä–æ–µ –≥–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É.",
                                       reply_markup=markup)
                bot.register_next_step_handler(msg, change_radius)

        if deleting_flag:
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


# def change_job_category(msg):
#     markup = define_job_markup(msg.chat.id)
#     markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_profile"))
#     bot.send_message(msg.chat.id, "–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å.", reply_markup=markup)


def define_job_markup(user_id, additional_call_data_forward="next_step_registration", flag_is_required=True):
    list_of_jobs = config.define_list_of_jobs(user_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    if flag_is_required:
        markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_start_menu"))
        for job_name in list_of_jobs:
            markup.add(types.InlineKeyboardButton(text=job_name,
                                                  callback_data=f"toggle+/+{config.job_to_variable[job_name]}"))
    else:
        for job_name in list_of_jobs:
            markup.add(types.InlineKeyboardButton(text=job_name,
                                                  callback_data=f"toggle+/+{config.job_to_variable[job_name]}+/+"
                                                                f"{additional_call_data_forward}"))
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=additional_call_data_forward))
    return markup


def change_city_name(msg):
    if msg.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        msg_to_profile(msg.chat.id)
    else:
        user = data_base_functions.SQLiteUser(msg.chat.id)
        proposed_city_list = config.find_similar_cities(msg.text)
        if msg.text in proposed_city_list:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã"),
                       types.KeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"))
            markup.add(types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"))
            user.change_city(msg.text)
            bot.send_message(msg.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=markup)
            msg_to_profile(msg.chat.id)
        elif proposed_city_list:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for city in proposed_city_list:
                markup.add(types.KeyboardButton(city))
            msg = bot.send_message(msg.chat.id,
                                   f"–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n"
                                   f"<b><i>{', '.join(proposed_city_list)}</i></b>", reply_markup=markup)
            bot.register_next_step_handler(msg, change_city_name)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
            msg = bot.send_message(msg.chat.id, "–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, change_city_name)


def change_phone_number(msg):
    if msg.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        msg_to_profile(msg.chat.id)
    else:
        if config.is_valid_phone_number(msg.text):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã"),
                       types.KeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"))
            markup.add(types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"))
            user = data_base_functions.SQLiteUser(msg.chat.id)
            user.change_phone_number(msg.text)
            bot.send_message(msg.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=markup)
            msg_to_profile(msg.chat.id)
        else:
            msg = bot.send_message(msg.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(msg, change_phone_number)


def change_radius(msg):
    if msg.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        msg_to_profile(msg.chat.id)
    else:
        if msg.text.isdigit():
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã"),
                       types.KeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"))
            markup.add(types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"))
            user = data_base_functions.SQLiteUser(msg.chat.id)
            user.change_radius(int(msg.text))
            bot.send_message(msg.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=markup)
            msg_to_profile(msg.chat.id)
        else:
            msg = bot.send_message(msg.chat.id, "–î–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
            bot.register_next_step_handler(msg, change_radius)


def msg_to_profile(user_id: int):
    user = data_base_functions.SQLiteUser(user_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üìã –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥—ã —Ä–∞–±–æ—Ç", callback_data="change+/+job_categories"))
    markup.add(types.InlineKeyboardButton("üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change+/+city_name"))
    markup.add(types.InlineKeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã", callback_data="change+/+radius"))
    markup.add(types.InlineKeyboardButton("üìû –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="change+/+phone_number"))
    user_data_text = f"""–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
            
<b>üìã –í–∏–¥—ã —Ä–∞–±–æ—Ç:</b> {", ".join(config.define_list_of_jobs_only_useful(user.user_id))}
üèô <b>–ì–æ—Ä–æ–¥:</b> {user.city_name}
üìç <b>–†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã:</b> {"–í—Å—è –†–æ—Å—Å–∏—è" if user.city_name == "–†–æ—Å—Å–∏—è" else user.radius}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}
    """
    return bot.send_message(user_id, user_data_text, reply_markup=markup)


def typing_action(user_id: int, seconds: int):
    bot.send_chat_action(user_id, "typing")
    time.sleep(seconds)


def set_radius_registration(msg):
    if msg.text.isdigit():
        if int(msg.text) <= 0 or int(msg.text) >= 40192:
            bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å. –ß–∏—Å–ª–æ, –±–æ–ª—å—à–µ –Ω—É–ª—è –∏ –º–µ–Ω—å—à–µ 40192.")
            bot.register_next_step_handler(msg, set_radius_registration)
            return
        user = data_base_functions.SQLiteUser(msg.chat.id)
        user.change_radius(int(msg.text))
        typing_action(msg.chat.id, 2)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
        bot.send_message(msg.chat.id, text_messages_storage.message_definer(6), reply_markup=markup)
    else:
        bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).")
        bot.register_next_step_handler(msg, set_radius_registration)


def is_user_in_channel(user_id, channel_id):
    try:
        member = bot.get_chat_member(channel_id, user_id)
        if member.status in ['member', 'administrator', 'creator']:
            return True
        else:
            return False
    except telebot.apihelper.ApiTelegramException as e:
        print(f"Error: {e}")
        return False


def registration_city_defining(msg):
    user = data_base_functions.SQLiteUser(msg.chat.id)
    proposed_city_list = config.find_similar_cities(msg.text)
    if msg.text in proposed_city_list:
        scheduler.remove_job(f"{msg.chat.id}_city_remind")
        text_to_remind = ("–£–∫–∞–∑–∞–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ —Ä–∞–±–æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∫–ª—É–±–∞ –∏–º–µ–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ "
                          "–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –µ–º—É –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å, –Ω–∞ –∫–∞–∫–∏–µ –∑–∞–∫–∞–∑—ã –≤—ã –º–æ–∂–µ—Ç–µ "
                          "–ø—Ä–µ—Ç–µ–Ω–¥–æ–≤–∞—Ç—å –∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã.\n\n"
                          "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ä–∞–¥–∏—É—Å, –¥–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –µ—â—ë –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É.")
        schedule_reminder(msg.chat.id, f"{msg.chat.id}_location_remind", 30, text_to_remind)
        user.change_city(msg.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π", request_location=True))
        markup.add(types.KeyboardButton("–î–∞–ª–µ–µ"))
        with open("geo_of_radius.png", 'rb') as photo:
            bot.send_photo(msg.chat.id, photo, caption=text_messages_storage.message_definer(5),
                           reply_markup=markup)
    elif proposed_city_list:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for city in proposed_city_list:
            markup.add(types.KeyboardButton(city))
        msg = bot.send_message(msg.chat.id,
                               f"–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n"
                               f"<b><i>{', '.join(proposed_city_list)}</i></b>", reply_markup=markup)
        bot.register_next_step_handler(msg, registration_city_defining)
    else:
        msg = bot.send_message(msg.chat.id, "–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        bot.register_next_step_handler(msg, registration_city_defining)


def send_reminder(chat_id, text_of_reminder):
    bot.send_message(chat_id, text_of_reminder)


def schedule_reminder(chat_id, message_id, time_to_remind, text_of_reminder):
    run_date = datetime.now() + timedelta(minutes=time_to_remind)
    scheduler.add_job(send_reminder, 'date', run_date=run_date, args=[chat_id, text_of_reminder], id=str(message_id))


if __name__ == '__main__':
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except (ConnectionError, ReadTimeout) as e:
        sys.stdout.flush()
        os.execv(sys.argv[0], sys.argv)
    else:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
