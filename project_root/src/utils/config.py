import src.utils.data_base_functions as data_base_functions
import Levenshtein
import sqlite3
import re
from telebot import types

jobs_dict = {
    "develop_project_documentation": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
    "earthworks": "–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
    "puring_the_foundation": "–ó–∞–ª–∏–≤–∫–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ / –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –ø–ª–∏—Ç—ã",
    "manufacture_metal_structures": "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
    "installation_metal_structures": "–ú–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
    "installation_sandwich_panels": "–ú–æ–Ω—Ç–∞–∂ —Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª–µ–π",
    "interior_decoration": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
    "installation_windows": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω / –¥–≤–µ—Ä–µ–π",
    "turnkey_work": "–†–∞–±–æ—Ç–∞ ¬´–ø–æ–¥ –∫–ª—é—á¬ª"
}
job_to_variable = {
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏": "develop_project_documentation",
    "–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã": "earthworks",
    "–ó–∞–ª–∏–≤–∫–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ / –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –ø–ª–∏—Ç—ã": "puring_the_foundation",
    "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π": "manufacture_metal_structures",
    "–ú–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π": "installation_metal_structures",
    "–ú–æ–Ω—Ç–∞–∂ —Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª–µ–π": "installation_sandwich_panels",
    "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã": "interior_decoration",
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω / –¥–≤–µ—Ä–µ–π": "installation_windows",
    "–†–∞–±–æ—Ç–∞ ¬´–ø–æ–¥ –∫–ª—é—á¬ª": "turnkey_work",

    "‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏": "develop_project_documentation",
    "‚úÖ –ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã": "earthworks",
    "‚úÖ –ó–∞–ª–∏–≤–∫–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ / –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –ø–ª–∏—Ç—ã": "puring_the_foundation",
    "‚úÖ –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π": "manufacture_metal_structures",
    "‚úÖ –ú–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π": "installation_metal_structures",
    "‚úÖ –ú–æ–Ω—Ç–∞–∂ —Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª–µ–π": "installation_sandwich_panels",
    "‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã": "interior_decoration",
    "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω / –¥–≤–µ—Ä–µ–π": "installation_windows",
    "‚úÖ –†–∞–±–æ—Ç–∞ ¬´–ø–æ–¥ –∫–ª—é—á¬ª": "turnkey_work",
}


def first_bot_token():
    return ""


def second_bot_token():
    return ""


def third_bot_token():
    return ""


def designer_bot_token():
    return ""


def access_token():
    return ""


def id_of_chat_vectra_montajniki():
    return -1002319246765


def link_to_our_catalog():
    return ""


def define_list_of_jobs(user_id: int):
    user = data_base_functions.SQLiteUser(user_id)
    list_of_jobs = []
    for i in jobs_dict:
        if user.__getattribute__(i):
            list_of_jobs.append(f"‚úÖ {jobs_dict[i]}")
        else:
            list_of_jobs.append(f"{jobs_dict[i]}")
    return list_of_jobs


def define_list_of_jobs_only_useful(user_id: int):
    user = data_base_functions.SQLiteUser(user_id)
    list_of_jobs = []
    for i in jobs_dict:
        if user.__getattribute__(i):
            list_of_jobs.append(f"{jobs_dict[i]}")
    return list_of_jobs


def find_similar_cities(city_name: str, max_distance: int = 1):
    connection = sqlite3.connect('../data/cities.db')
    cursor = connection.cursor()
    cursor.execute('SELECT city_name FROM cities')
    cities = cursor.fetchall()
    connection.close()

    similar_cities = []
    for (city,) in cities:
        distance = Levenshtein.distance(city_name.lower(), city.lower())
        if distance <= max_distance:
            similar_cities.append(city)

    return similar_cities


def is_valid_phone_number(phone_number):
    pattern = r'^\+7\d{10}$'
    return re.match(pattern, phone_number) is not None


def start_markup():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton("üèö –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    btn2 = types.KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    btn3 = types.KeyboardButton("üë®‚Äçüíº –ú–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä")
    btn4 = types.KeyboardButton("üéÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
    btn5 = types.KeyboardButton("üìù –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ")
    btn6 = types.KeyboardButton("üí¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")

    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    return markup


def path_to_jobsDB():
    return "sqlite://///home/vectra_telegram_bot/project_root/src/data/jobs.sqlite"  # ../data/jobs.sqlite


def path_to_general_data_base():
    return "/home/vectra_telegram_bot/project_root/src/data/general_data_base.db"  # ../data/general_data_base.db
