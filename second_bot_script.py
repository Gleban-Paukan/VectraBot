import time
import sys
import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from datetime import datetime, timedelta
from telebot import types
from requests import ReadTimeout
import os
import data_base_functions
import config
import text_messages_storage

bot = telebot.TeleBot(config.second_bot_token())
bot.parse_mode = 'html'

jobstores = {
    'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')
}
scheduler = BackgroundScheduler(jobstores=jobstores)
scheduler.start()


@bot.message_handler(commands=['start'])
def start_message_handler(message):
    pass


@bot.message_handler(content_types=['text'])
def text_message_handler(message):
    if message.text == "üéÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏":
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="get_user_balance"),
                   types.InlineKeyboardButton("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤",
                                              callback_data="information_about_referral_program"))
        bot.send_message(message.chat.id, "–ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
    elif message.text == "üí¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton("–ß–∞—Ç-–±–æ—Ç", url="https://t.me/mrk_vektra"),
                   types.InlineKeyboardButton("–ó–≤–æ–Ω–æ–∫ –Ω–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞", callback_data="call_to_qualifier"))
        markup.add(types.InlineKeyboardButton("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data="FAQ"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=markup)
    elif message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        msg_to_profile(message.chat.id)
    elif message.text == "üìù –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ":
        bot.send_message(message.chat.id, "TODO")
    elif message.text == "üèö –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        bot.send_message(message.chat.id, "TODO")
    elif message.text == "üë®‚Äçüíº –ú–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä":
        bot.send_message(message.chat.id, "TODO")



@bot.callback_query_handler(func=lambda call: True)
def inline_handler(call):
    deleting_flag = True
    if call.data == "wanna_know_more":
        scheduler.remove_job(f"{call.message.chat.id}_register_confirmation_1_remind")
        scheduler.remove_job(f"{call.message.chat.id}_register_confirmation_2_remind")
        scheduler.remove_job(f"{call.message.chat.id}_register_confirmation_3_remind")
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="example_message"),
                   types.InlineKeyboardButton("–ù–µ—Ç", callback_data="dont_need_example_message"))
        bot.send_message(call.message.chat.id, text_messages_storage.message_definer(14), reply_markup=markup)
    elif call.data == "example_message":
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton("–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data="ZAGLUSHKA"))
        bot.send_message(call.message.chat.id, text_messages_storage.message_definer(15))
    elif call.data == "information_about_referral_program":
        bot.send_message(call.message.chat.id, "<b>–ó–Ω–∞–∫–æ–º–∏–º –≤–∞—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b>")
        typing_action(call.message.chat.id, 1)
        bot.send_message(call.message.chat.id, text_messages_storage.message_definer(9))
        typing_action(call.message.chat.id, 4)
        bot.send_message(call.message.chat.id,
                         "<b>–ù–æ —ç—Ç–æ –µ—â–µ –Ω–µ –≤—Å–µ! –°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ "
                         "–≤—ã –ø–æ–ª—É—á–∏—Ç–µ, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏. </b>")
        typing_action(call.message.chat.id, 5)
        bot.send_message(call.message.chat.id, text_messages_storage.message_definer(10))
        typing_action(call.message.chat.id, 1)
        bot.send_message(call.message.chat.id, "<b>–£–∂–µ –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏? "
                                               "–ê —á—Ç–æ–±—ã –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–º–Ω–µ–Ω–∏—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ–± –∞–∫—Ü–∏—è—Ö"
                                               " –∏ –±–æ–Ω—É—Å–∞—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã: </b>")
        typing_action(call.message.chat.id, 6)
        bot.send_message(call.message.chat.id, text_messages_storage.message_definer(11),
                         reply_markup=config.start_markup())

    elif call.data == "get_user_balance":
        bot.send_message(call.message.chat.id, "TODO", reply_markup=config.start_markup())
    elif call.data == "call_to_qualifier":
        bot.send_message(call.message.chat.id, "TODO", reply_markup=config.start_markup())
    elif call.data == "FAQ":
        bot.send_message(call.message.chat.id, "TODO", reply_markup=config.start_markup())
    elif "toggle+/+" in call.data:
        job_data = call.data.split("+/+")
        job_name = job_data[1]
        user = data_base_functions.SQLiteUser(call.message.chat.id)
        if user.__getattribute__(job_name):
            user.remove_job_option(job_name)
        else:
            user.add_job_option(job_name)
        if len(job_data) == 2:
            markup = define_job_markup(call.message.chat.id)
        else:
            markup = define_job_markup(call.message.chat.id, job_data[2], False)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=markup)
        deleting_flag = False
    elif "change+/+" in call.data:
        value = call.data.split("+/+")[1]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        if value == "job_categories":
            markup = define_job_markup(call.message.chat.id, "back_to_profile", False)
            bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å.",
                             reply_markup=markup)
        elif value == "city_name":
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:", reply_markup=markup)
            bot.register_next_step_handler(msg, change_city_name)
        elif value == "phone_number":
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7**********:",
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, change_phone_number)
        elif value == "radius":
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, "
                                                         "–∫–æ—Ç–æ—Ä–æ–µ –≥–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É.",
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, change_radius)
    elif call.data == "back_to_menu":
        msg_to_profile(call.message.chat.id)
    if deleting_flag:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


@bot.message_handler(content_types=['new_chat_members'])
def new_member_handler(message):
    user_id = message.json['new_chat_participant']['id']
    if data_base_functions.check_radius_exists(user_id):
        schedule_reminder(user_id, f"{user_id}_register_confirmation_1_remind", 2880, "text_to_remind1")
        schedule_reminder(user_id, f"{user_id}_register_confirmation_2_remind", 7200, "text_to_remind2")
        schedule_reminder(user_id, f"{user_id}_register_confirmation_3_remind", 1080, "text_to_remind3")
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª—É–±–∞ @name (–ù–∞–¥–æ –ø—Ä–∏–¥—É–º–∞—Ç—å)",
                         reply_markup=config.start_markup())
        typing_action(user_id, 2)
        bot.send_message(user_id, text_messages_storage.message_definer(12))
        typing_action(user_id, 5)
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?", callback_data="wanna_know_more"))  # stupid value name
        bot.send_message(user_id, text_messages_storage.message_definer(13), reply_markup=markup)


def define_job_markup(user_id, additional_call_data_forward="next_step_registration", flag_is_required=True):
    list_of_jobs = config.define_list_of_jobs(user_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    if flag_is_required:
        markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_start_menu"))
        for job_name in list_of_jobs:
            markup.add(types.InlineKeyboardButton(text=job_name,
                                                  callback_data=f"toggle+/+{config.job_to_variable[job_name]}"))
    else:
        for job_name in list_of_jobs:
            markup.add(types.InlineKeyboardButton(text=job_name,
                                                  callback_data=f"toggle+/+{config.job_to_variable[job_name]}+/+"
                                                                f"{additional_call_data_forward}"))
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="back_to_menu"))
    return markup


def change_city_name(msg):
    if msg.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        msg_to_profile(msg.chat.id, True)
    else:
        user = data_base_functions.SQLiteUser(msg.chat.id)
        proposed_city_list = config.find_similar_cities(msg.text)
        if msg.text in proposed_city_list:
            user.change_city(msg.text)
            bot.send_message(msg.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=config.start_markup())
            msg_to_profile(msg.chat.id)
        elif proposed_city_list:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for city in proposed_city_list:
                markup.add(types.KeyboardButton(city))
            msg = bot.send_message(msg.chat.id,
                                   f"–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n"
                                   f"<b><i>{', '.join(proposed_city_list)}</i></b>", reply_markup=markup)
            bot.register_next_step_handler(msg, change_city_name)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
            msg = bot.send_message(msg.chat.id, "–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, change_city_name)


def change_phone_number(msg):
    if msg.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        msg_to_profile(msg.chat.id, True)
    else:
        if config.is_valid_phone_number(msg.text):
            user = data_base_functions.SQLiteUser(msg.chat.id)
            user.change_phone_number(msg.text)
            bot.send_message(msg.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=config.start_markup())
            msg_to_profile(msg.chat.id)
        else:
            msg = bot.send_message(msg.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(msg, change_phone_number)


def change_radius(msg):
    if msg.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        msg_to_profile(msg.chat.id, True)
    else:
        if msg.text.isdigit():
            user = data_base_functions.SQLiteUser(msg.chat.id)
            user.change_radius(int(msg.text))
            bot.send_message(msg.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=config.start_markup())
            msg_to_profile(msg.chat.id)
        else:
            msg = bot.send_message(msg.chat.id, "–î–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
            bot.register_next_step_handler(msg, change_radius)


def typing_action(user_id: int, seconds: int):
    bot.send_chat_action(user_id, "typing")
    time.sleep(seconds)


def msg_to_profile(user_id: int, back_to_menu_flag=False):
    user = data_base_functions.SQLiteUser(user_id)
    if back_to_menu_flag:
        bot.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –º–µ–Ω—é", reply_markup=config.start_markup())
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üìã –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥—ã —Ä–∞–±–æ—Ç", callback_data="change+/+job_categories"))
    markup.add(types.InlineKeyboardButton("üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change+/+city_name"))
    markup.add(types.InlineKeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã", callback_data="change+/+radius"))
    markup.add(types.InlineKeyboardButton("üìû –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="change+/+phone_number"))
    user_data_text = f"""–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
            
<b>üìã –í–∏–¥—ã —Ä–∞–±–æ—Ç:</b> {", ".join(config.define_list_of_jobs_only_useful(user.user_id))}
üèô <b>–ì–æ—Ä–æ–¥:</b> {user.city_name}
üìç <b>–†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã:</b> {"–í—Å—è –†–æ—Å—Å–∏—è" if user.city_name == "–†–æ—Å—Å–∏—è" else user.radius}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}
    """
    return bot.send_message(user_id, user_data_text, reply_markup=markup)


def send_reminder(chat_id, text_of_reminder):
    bot.send_message(chat_id, text_of_reminder)


def schedule_reminder(chat_id, message_id, time_to_remind, text_of_reminder):
    run_date = datetime.now() + timedelta(minutes=time_to_remind)
    scheduler.add_job(send_reminder, 'date', run_date=run_date, args=[chat_id, text_of_reminder], id=str(message_id))


if __name__ == '__main__':
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except (ConnectionError, ReadTimeout) as e:
        sys.stdout.flush()
        os.execv(sys.argv[0], sys.argv)
    else:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
