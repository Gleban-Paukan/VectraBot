import time
import sys
import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from datetime import datetime, timedelta
from telebot import types
from requests import ReadTimeout
import os

from telebot.types import ForceReply

import data_base_functions
import config
import text_messages_storage

PHOTO_DIR = 'user_photos'

if not os.path.exists(PHOTO_DIR):
    os.makedirs(PHOTO_DIR)

bot = telebot.TeleBot(config.second_bot_token())
designer_bot = telebot.TeleBot(config.designer_bot_token())
admin_bot = telebot.TeleBot(config.third_bot_token())
admin_bot.parse_mode = "html"
designer_bot.parse_mode = "html"
bot.parse_mode = 'html'

jobstores = {
    'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')
}
scheduler = BackgroundScheduler(jobstores=jobstores)
scheduler.start()
photos_dict = {}
user_states = {}
designers = [1493818085, 1125076741]  # 1223719258


@bot.message_handler(commands=['start'])
def start_message_handler(message):
    user_id = message.chat.id  # TODO REMOVE JOB OF REGISTRATION REMIND BOT 1
    user = data_base_functions.SQLiteUser(user_id)
    if user.balance is None:
        user.change_balance(1000)
        # scheduler.remove_job(f"{user_id}_city_remind")
        if data_base_functions.check_radius_exists(user_id):
            schedule_reminder(user_id, f"{user_id}_register_confirmation_1_remind_second_bot", 2880,
                              text_messages_storage.message_definer(19))
            schedule_reminder(user_id, f"{user_id}_register_confirmation_2_remind_second_bot", 7200,
                              text_messages_storage.message_definer(17))
            schedule_reminder(user_id, f"{user_id}_register_confirmation_3_remind_second_bot", 1080,
                              text_messages_storage.message_definer(18))
            bot.send_message(user_id, text_messages_storage.message_definer(20),
                             reply_markup=config.start_markup())
            typing_action(user_id, 2)
            bot.send_message(user_id, text_messages_storage.message_definer(12))
            typing_action(user_id, 5)
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –º–æ–Ω—Ç–∞–∂?", callback_data="wanna_know_more_montage"),
                types.InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
                                           callback_data="information_about_referral_program"))  # stupid value name
            bot.send_message(user_id, f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ '
                                      f'"–í–ï–ö–¢–†–ê", –≤–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {user.balance}\n\n'
                                      '–í—ã–±–µ—Ä–µ—Ç–µ, –æ —á–µ–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –º–µ–Ω—é.", reply_markup=config.start_markup())


@bot.message_handler(
    func=lambda message: message.chat.id in user_states and user_states[message.chat.id]['expected_photos'] == 0,
    content_types=['text'])
def set_expected_photos(message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∞–ª—å–±–æ–º–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if message.text == "/cancel":
            bot.send_message(message.chat.id, "–í–≤–æ–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–º–µ–Ω–µ–Ω.")
            del user_states[message.chat.id]
            return
        num_photos = int(message.text)
        if num_photos <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        if num_photos == 1:
            bot.send_message(message.chat.id,
                             "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                             "–ù–∞–∂–º–∏—Ç–µ <b>/cancel</b>, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥")
            return
        elif num_photos >= 10:
            bot.send_message(message.chat.id,
                             "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                             "–ù–∞–∂–º–∏—Ç–µ <b>/cancel</b>, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥")
            return
        user_states[message.chat.id]['expected_photos'] = num_photos
        bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {num_photos} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")


@bot.message_handler(content_types=['photo'])
def handle_photos(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –¥–æ–±–∞–≤–ª—è—è –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if chat_id in user_states:
        user_states[chat_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –æ–Ω–æ
        if user_states[chat_id]['expected_photos'] > 0 and user_states[chat_id]['received_photos'] < \
                user_states[chat_id]['expected_photos']:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –≤ —Å–∞–º–æ–º –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            file_info = bot.get_file(message.photo[-1].file_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
            downloaded_file = bot.download_file(file_info.file_path)
            photo_path = os.path.join(PHOTO_DIR, f"{chat_id}_{file_info.file_unique_id}.jpg")

            with open(photo_path, 'wb') as new_file:
                new_file.write(downloaded_file)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            user_states[chat_id]['photos'].append(photo_path)
            user_states[chat_id]['received_photos'] += 1
            # –ï—Å–ª–∏ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if user_states[chat_id]['received_photos'] == user_states[chat_id]['expected_photos']:
                save_album_to_db(chat_id, user_states[chat_id]['photos'])
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del user_states[chat_id]


def save_album_to_db(chat_id, photo_paths):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏."""
    path_to_images = " ".join(photo_paths)
    user = data_base_functions.SQLiteUser(chat_id)
    user.change_path_to_images(path_to_images)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="add_additional_information"))
    bot.send_message(chat_id, "–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def text_message_handler(message):
    if message.text == "üéÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏":
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="get_user_balance"),
                   types.InlineKeyboardButton("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤",
                                              callback_data="information_about_referral_program"))
        bot.send_message(message.chat.id, "–ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
    elif message.text == "üí¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton("–ß–∞—Ç-–±–æ—Ç", url="https://t.me/mrk_vektra"),
                   types.InlineKeyboardButton("–ó–≤–æ–Ω–æ–∫ –Ω–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞", callback_data="call_to_qualifier"))
        markup.add(types.InlineKeyboardButton("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data="FAQ"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=markup)
    elif message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        msg_to_profile(message.chat.id)
    elif message.text == "üìù –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ":
        bot.send_message(message.chat.id, text_messages_storage.message_definer(24))
    elif message.text == "üèö –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="order_list"),
                   types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ—Å—á–µ—Ç",
                                              callback_data="application_for_miscalculation"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=markup)
    elif message.text == "üë®‚Äçüíº –ú–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä":
        user = data_base_functions.SQLiteUser(message.chat.id)
        if user.manager is None:
            schedule_manager(message.chat.id)
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–±–æ—Ä –ø—Ä–∏–Ω—è—Ç–∞!")
            bot.send_message(message.chat.id, "–ü–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞—Å –ø–æ–∑–Ω–∞–∫–æ–º–∏–º!"
                                              "\n\n–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤ ‚è∞")
            user.change_manager("SEARCHING")
        elif user.manager == "SEARCHING":
            bot.send_message(message.chat.id,
                             "–ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –ª–∏—á–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ!")
        else:
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è –≤ Telegram", url="https://t.me/+79370602463"),
                       types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è –≤ WhatsApp", url="https://wa.me/79370602463"))
            bot.send_message(message.chat.id,
                             "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî <b>–ú–∞—Ä–∏—è</b>.\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: <b>+79370602463</b>\n"
                             "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: <b>m.lukyanova@vektra.online</b>",
                             reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def inline_handler(call):
    deleting_flag = True
    if call.data == "wanna_know_more_montage":
        scheduler.remove_job(f"{call.message.chat.id}_register_confirmation_1_remind_second_bot")
        scheduler.remove_job(f"{call.message.chat.id}_register_confirmation_2_remind_second_bot")
        scheduler.remove_job(f"{call.message.chat.id}_register_confirmation_3_remind_second_bot")
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="example_message"),
                   types.InlineKeyboardButton("–ù–µ—Ç", callback_data="dont_need_example_message"))
        bot.send_message(call.message.chat.id, text_messages_storage.message_definer(14))
        bot.send_message(call.message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è?", reply_markup=markup)
    elif call.data == "example_message":
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(types.InlineKeyboardButton("–í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data="finish_of_example_message"),
                   types.InlineKeyboardButton("–û—Ç–∫–∞–∑", callback_data="finish_of_example_message"))
        bot.send_message(call.message.chat.id, text_messages_storage.message_definer(21))
        typing_action(call.message.chat.id, 2)
        bot.send_message(call.message.chat.id, "–î–∞–ª–µ–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å: –≤–æ–∑—å–º–µ—Ç–µ –≤—ã –∑–∞–∫–∞–∑ –∏–ª–∏ –Ω–µ—Ç.")
        bot.send_message(call.message.chat.id, "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º:", reply_markup=markup)
    elif call.data == "finish_of_example_message":
        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à —á–∞—Ç-–±–æ—Ç! –ö–∞–∫ —Ç–æ–ª—å–∫–æ —É "
                                               "–Ω–∞—Å –ø–æ—è–≤—è—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–æ–Ω—Ç–∞–∂, —è —Å—Ä–∞–∑—É –∂–µ —Å–æ–æ–±—â—É –≤–∞–º –æ–± —ç—Ç–æ–º."
                                               " –ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –∏ –Ω–∞–¥–µ—é—Å—å –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!")
    elif call.data == "information_about_referral_program":
        with open("referral_instructions.png", "rb") as photo:
            bot.send_photo(call.message.chat.id, caption=text_messages_storage.message_definer(8), photo=photo)
        typing_action(call.message.chat.id, 1)
        bot.send_message(call.message.chat.id, "<b>–£–∂–µ –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏? "
                                               "–ê —á—Ç–æ–±—ã –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–º–Ω–µ–Ω–∏—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ–± –∞–∫—Ü–∏—è—Ö"
                                               " –∏ –±–æ–Ω—É—Å–∞—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã: </b>")
        typing_action(call.message.chat.id, 6)
        bot.send_message(call.message.chat.id, text_messages_storage.message_definer(11),
                         reply_markup=config.start_markup())
        deleting_flag = False

    elif call.data == "get_user_balance":
        bot.send_message(call.message.chat.id, "TODO", reply_markup=config.start_markup())
    elif call.data == "call_to_qualifier":
        bot.send_message(call.message.chat.id, "TODO", reply_markup=config.start_markup())
    elif call.data == "FAQ":
        bot.send_message(call.message.chat.id, text_messages_storage.message_definer(23),
                         reply_markup=config.start_markup())
    elif call.data == "order_list":
        user = data_base_functions.SQLiteUser(call.message.chat.id)
        if user.orders_id is None:
            bot.send_message(call.message.chat.id, text_messages_storage.message_definer(22))
        else:
            if len(user.orders_id.split()) > 1:
                bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:")
            for order_id in user.orders_id.split():
                order_data = data_base_functions.get_order_data(order_id)[0]
                square = order_data[1]
                city = order_data[2]
                jobs = order_data[3].split(",")
                address = order_data[4]
                text = f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É:
    
üî®–í–∏–¥—ã —Ä–∞–±–æ—Ç:
<b>
{'\n'.join(jobs)}
</b>
üìç–û–±—ä–µ–∫—Ç –ø–æ –∞–¥—Ä–µ—Å—É: <b>{city}, {address}</b>
üìè–û–±—ä–µ–º: {square} –º¬≤           
        """
                bot.send_message(call.message.chat.id, text)
                deleting_flag = False
    elif call.data == "application_for_miscalculation":
        bot.send_message(call.message.chat.id, text_messages_storage.message_definer(24))
        deleting_flag = False
    elif "toggle+/+" in call.data:
        job_data = call.data.split("+/+")
        job_name = job_data[1]
        user = data_base_functions.SQLiteUser(call.message.chat.id)
        if user.__getattribute__(job_name):
            user.remove_job_option(job_name)
        else:
            user.add_job_option(job_name)
        if len(job_data) == 2:
            markup = define_job_markup(call.message.chat.id)
        else:
            markup = define_job_markup(call.message.chat.id, job_data[2], False)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=markup)
        deleting_flag = False
    elif "change+/+" in call.data:
        value = call.data.split("+/+")[1]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
        if value == "job_categories":
            markup = define_job_markup(call.message.chat.id, "back_to_profile", False)
            bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å.",
                             reply_markup=markup)
        elif value == "city_name":
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:", reply_markup=markup)
            bot.register_next_step_handler(msg, change_city_name)
        elif value == "phone_number":
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7**********:",
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, change_phone_number)
        elif value == "radius":
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, "
                                                         "–∫–æ—Ç–æ—Ä–æ–µ –≥–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É.",
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, change_radius)
    elif "order+/+" in call.data:
        order_id = call.data.split("+/+")[1]
        order_data = data_base_functions.get_order_data(order_id)[0]
        square = order_data[1]
        city = order_data[2]
        jobs = order_data[3].split(",")
        address = order_data[4]
        status = order_id[5]
        if status != "WAITING":
            bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥—Ä—É–≥–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
            return
        user = data_base_functions.SQLiteUser(call.message.chat.id)
        user.add_order(order_id)
        bot.send_message(call.message.chat.id,
                         "–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —É—Ç–æ—á–Ω–∏—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞.")
        text = f"""
–ù–∞ –∑–∞—è–≤–∫—É <code>{order_id}</code> –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å!

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞—è–≤–∫–µ:

–í–∏–¥—ã —Ä–∞–±–æ—Ç:
<b>
{'\n'.join(jobs)}
</b>
–û–±—ä–µ–∫—Ç –ø–æ –∞–¥—Ä–µ—Å—É: {city}, {address}
–û–±—ä–µ–º: {square} –º¬≤

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—á–∏–∫—É:


Telegram ID: <code>{user.user_id}</code>
AMOCRM ID: <code>{user.lead_id}</code>
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{user.phone_number}</b>
"""
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"confirm_order+/+{call.message.chat.id}+/+{order_id}"))
        for admin_id in data_base_functions.get_admins_list()[0]:
            admin_bot.send_message(admin_id, text, reply_markup=markup)
    elif call.data == "add_additional_information":
        markup = types.InlineKeyboardMarkup(row_width=2)
        user = data_base_functions.SQLiteUser(call.message.chat.id)
        buttons = [
            types.InlineKeyboardButton(f"{user.define_check_mark('object_description')} –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞",
                                       callback_data="description"),
            types.InlineKeyboardButton(f"{user.define_check_mark('types_of_completed_works')} –í–∏–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç",
                                       callback_data="work_type"),
            types.InlineKeyboardButton(f"{user.define_check_mark('average_price')} –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤",
                                       callback_data="cost"),
            types.InlineKeyboardButton(f"{user.define_check_mark('path_to_images')} –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                                       callback_data="upload_photos"),
            types.InlineKeyboardButton(f"{user.define_check_mark('email')} –£–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç", callback_data="website"),
            types.InlineKeyboardButton(f"{user.define_check_mark('site')} –£–∫–∞–∑–∞—Ç—å –ø–æ—á—Ç—É", callback_data="email"),
            types.InlineKeyboardButton(
                f"{user.define_check_mark('path_to_portfolio')} –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                callback_data="request_portfolio")
        ]
        markup.add(*buttons)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å:", reply_markup=markup)

    elif call.data in ["description", "work_type", "cost", "website", "email"]:
        request_data(call)
    elif call.data == "upload_photos":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å (3-4 —Ñ–æ—Ç–æ).")
        user_states[call.message.chat.id] = {'expected_photos': 0, 'received_photos': 0, 'photos': []}
        # bot.register_next_step_handler(call.message, handle_photos)
    elif call.data == "request_portfolio":
        user = data_base_functions.SQLiteUser(call.message.chat.id)
        user_data = [user.__getattribute__(i) for i in ["object_description", "types_of_completed_works",
                                                        "average_price", "path_to_images", "email"]]
        if any(i is None for i in user_data):
            bot.answer_callback_query(call.id, "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–∏–∑–∞–π–Ω–µ—Ä—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        text = f"""
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–Ω–Ω—ã–µ:

üè¢ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: <b>{user.object_description}</b>
üõ† –í–∏–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç: <b>{user.types_of_completed_works}</b>
üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤: <b>{user.average_price}</b>
üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: <b>{user.email}</b>
üåê –°–∞–π—Ç{" –Ω–µ —É–∫–∞–∑–∞–Ω" if user.site is None else f': <b>{user.site}</b>'}
"""
        media = []
        for path in user.path_to_images.split():
            media.append(types.InputMediaPhoto(types.InputFile(path)))
        bot.send_media_group(call.message.chat.id, media=media)
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [types.InlineKeyboardButton("–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", callback_data="add_additional_information"),
                   types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–∏–∑–∞–π–Ω–µ—Ä—É", callback_data="send_to_designer")]
        markup.add(*buttons)
        deleting_flag = False
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

    elif call.data == "send_to_designer":
        user = data_base_functions.SQLiteUser(call.message.chat.id)
        text = f"""
–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:
ID: <code>{user.user_id}</code>

üè¢ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: <b>{user.object_description}</b>
üõ† –í–∏–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç: <b>{user.types_of_completed_works}</b>
üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤: <b>{user.average_price}</b>
üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: <b>{user.email}</b>
üåê –°–∞–π—Ç{" –Ω–µ —É–∫–∞–∑–∞–Ω" if user.site is None else f': <b>{user.site}</b>'}
"""
        media = []
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data=f"request_pdf_{user.user_id}"))
        for path in user.path_to_images.split():
            media.append(types.InputMediaPhoto(types.InputFile(path)))
        for designer in designers:
            designer_bot.send_media_group(designer, media=media)
            designer_bot.send_message(designer, text, reply_markup=markup)
        bot.send_message(call.message.chat.id,
                         "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–±—ã—á–Ω–æ –Ω–∞—à –¥–∏–∑–∞–π–Ω–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.")
    elif call.data == "back_to_menu":
        msg_to_profile(call.message.chat.id)
    if deleting_flag:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


@bot.message_handler(content_types=['new_chat_members'])
def new_member_handler(message):
    user_id = message.json['new_chat_participant']['id']  # TODO REMOVE JOB OF REGISTRATION REMIND BOT 1
    # scheduler.remove_job(f"{user_id}_city_remind")
    if data_base_functions.check_radius_exists(user_id):
        schedule_reminder(user_id, f"{user_id}_register_confirmation_1_remind_second_bot", 2880,
                          text_messages_storage.message_definer(19))
        schedule_reminder(user_id, f"{user_id}_register_confirmation_2_remind_second_bot", 7200,
                          text_messages_storage.message_definer(17))
        schedule_reminder(user_id, f"{user_id}_register_confirmation_3_remind_second_bot", 1080,
                          text_messages_storage.message_definer(18))
        bot.send_message(user_id, text_messages_storage.message_definer(20),
                         reply_markup=config.start_markup())
        typing_action(user_id, 2)
        bot.send_message(user_id, text_messages_storage.message_definer(12))
        typing_action(user_id, 5)
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –º–æ–Ω—Ç–∞–∂?", callback_data="wanna_know_more_montage"),
            types.InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
                                       callback_data="information_about_referral_program"))  # stupid value name
        bot.send_message(user_id, text_messages_storage.message_definer(13), reply_markup=markup)


# @bot.message_handler(content_types=['photo'])
# def handle_photos(message):
#     # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∞–ª—å–±–æ–º—É (–≥—Ä—É–ø–ø–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤)
#     if message.media_group_id:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ media_group_id
#         if message.media_group_id not in photos_dict:
#             photos_dict[message.media_group_id] = []
#
#         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –≤ —Å–∞–º–æ–º –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
#         file_info = bot.get_file(message.photo[-1].file_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
#         downloaded_file = bot.download_file(file_info.file_path)
#         photo_path = os.path.join(PHOTO_DIR, f"{message.chat.id}_{file_info.file_unique_id}.jpg")
#
#         with open(photo_path, 'wb') as new_file:
#             new_file.write(downloaded_file)
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
#         photos_dict[message.media_group_id].append(photo_path)
#
#     # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∞–ª—å–±–æ–º—É, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
#     if not message.media_group_id:
#         handle_single_photo(message)
#
#     # –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –∞–ª—å–±–æ–º–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     # –û–±—ã—á–Ω–æ Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª—å–±–æ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞
#     if len(photos_dict[
#                message.media_group_id]) >= 2:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∞–ª—å–±–æ–º–µ
#         save_album_to_db(message.chat.id, message.media_group_id)


# def save_album_to_db(chat_id, media_group_id):
#     """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
#     path_to_images = " ".join(photos_dict[media_group_id])
#     user = data_base_functions.SQLiteUser(chat_id)
#     user.change_path_to_images(path_to_images)
#
#     # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
#     print(photos_dict)
#     # del photos_dict[media_group_id]
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     markup = types.InlineKeyboardMarkup(row_width=1)
#     markup.add(types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="add_additional_information"))
#     bot.send_message(chat_id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=markup)
#
#
# def handle_single_photo(message):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ."""
#     file_info = bot.get_file(message.photo[-1].file_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
#     downloaded_file = bot.download_file(file_info.file_path)
#     photo_path = os.path.join(PHOTO_DIR, f"{message.chat.id}_{file_info.file_unique_id}.jpg")
#
#     with open(photo_path, 'wb') as new_file:
#         new_file.write(downloaded_file)
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#     user = data_base_functions.SQLiteUser(message.chat.id)
#     user.change_path_to_images(photo_path)
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     bot.send_message(message.chat.id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

def request_data(call):
    messages = {
        "description": "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –≤–∏–¥—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤—ã –±–µ—Ä–µ—Ç–µ –≤ —Ä–∞–±–æ—Ç—É (–≥–∞—Ä–∞–∂, –±—ã—Ç–æ–≤–∫–∞, –∞–Ω–≥–∞—Ä, —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ).",
        "work_type": "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ.",
        "cost": "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –º¬≤.",
        "website": "–£–∫–∞–∂–∏—Ç–µ —Å–∞–π—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å.",
        "email": "–£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É."
    }
    msg = bot.send_message(call.message.chat.id, messages[call.data])
    bot.register_next_step_handler(msg, save_user_data, call.data)


def save_user_data(message, key):
    user_id = message.from_user.id
    user = data_base_functions.SQLiteUser(user_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="add_additional_information"))
    if key == "description":
        user.change_object_description(message.text)
    elif key == "work_type":
        user.change_types_of_completed_works(message.text)
    elif key == "cost":
        user.change_average_price(message.text)
    elif key == "website":
        user.change_site(message.text)
    elif key == "email":
        user.change_email(message.text)

    bot.send_message(message.chat.id, "<b>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.</b>", reply_markup=markup)


def define_job_markup(user_id, additional_call_data_forward="next_step_registration", flag_is_required=True):
    list_of_jobs = config.define_list_of_jobs(user_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    if flag_is_required:
        markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_start_menu"))
        for job_name in list_of_jobs:
            markup.add(types.InlineKeyboardButton(text=job_name,
                                                  callback_data=f"toggle+/+{config.job_to_variable[job_name]}"))
    else:
        for job_name in list_of_jobs:
            markup.add(types.InlineKeyboardButton(text=job_name,
                                                  callback_data=f"toggle+/+{config.job_to_variable[job_name]}+/+"
                                                                f"{additional_call_data_forward}"))
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="back_to_menu"))
    return markup


def change_city_name(msg):
    if msg.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        msg_to_profile(msg.chat.id, True)
    else:
        user = data_base_functions.SQLiteUser(msg.chat.id)
        proposed_city_list = config.find_similar_cities(msg.text)
        if msg.text in proposed_city_list:
            user.change_city(msg.text)
            bot.send_message(msg.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=config.start_markup())
            msg_to_profile(msg.chat.id)
        elif proposed_city_list:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for city in proposed_city_list:
                markup.add(types.KeyboardButton(city))
            msg = bot.send_message(msg.chat.id,
                                   f"–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n"
                                   f"<b><i>{', '.join(proposed_city_list)}</i></b>", reply_markup=markup)
            bot.register_next_step_handler(msg, change_city_name)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
            msg = bot.send_message(msg.chat.id, "–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.",
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, change_city_name)


def change_phone_number(msg):
    if msg.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        msg_to_profile(msg.chat.id, True)
    else:
        if config.is_valid_phone_number(msg.text):
            user = data_base_functions.SQLiteUser(msg.chat.id)
            user.change_phone_number(msg.text)
            bot.send_message(msg.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=config.start_markup())
            msg_to_profile(msg.chat.id)
        else:
            msg = bot.send_message(msg.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(msg, change_phone_number)


def change_radius(msg):
    if msg.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        msg_to_profile(msg.chat.id, True)
    else:
        if msg.text.isdigit():
            user = data_base_functions.SQLiteUser(msg.chat.id)
            user.change_radius(int(msg.text))
            bot.send_message(msg.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=config.start_markup())
            msg_to_profile(msg.chat.id)
        else:
            msg = bot.send_message(msg.chat.id, "–î–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
            bot.register_next_step_handler(msg, change_radius)


def typing_action(user_id: int, seconds: int):
    bot.send_chat_action(user_id, "typing")
    time.sleep(seconds)


def msg_to_profile(user_id: int, back_to_menu_flag=False):
    user = data_base_functions.SQLiteUser(user_id)
    if back_to_menu_flag:
        bot.send_message(user_id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –º–µ–Ω—é", reply_markup=config.start_markup())
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üìã –ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥—ã —Ä–∞–±–æ—Ç", callback_data="change+/+job_categories"))
    markup.add(types.InlineKeyboardButton("üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change+/+city_name"))
    markup.add(types.InlineKeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã", callback_data="change+/+radius"))
    markup.add(types.InlineKeyboardButton("üìû –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="change+/+phone_number"))
    markup.add(
        types.InlineKeyboardButton("‚úçÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="add_additional_information"))
    user_data_text = f"""–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
            
<b>üìã –í–∏–¥—ã —Ä–∞–±–æ—Ç:</b> {", ".join(config.define_list_of_jobs_only_useful(user.user_id))}
üèô <b>–ì–æ—Ä–æ–¥:</b> {user.city_name}
üìç <b>–†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã:</b> {"–í—Å—è –†–æ—Å—Å–∏—è" if user.city_name == "–†–æ—Å—Å–∏—è" else user.radius}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone_number}
    """
    return bot.send_message(user_id, user_data_text, reply_markup=markup)


def send_reminder(chat_id, text_of_reminder):
    bot.send_message(chat_id, text_of_reminder)


def add_manager(chat_id):
    user = data_base_functions.SQLiteUser(chat_id)
    user.change_manager("Maria")
    text = """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±—É–¥–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤–∞—Å –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö —Å–¥–µ–ª–∫–∏ üìû

<b>–ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å ‚Äî –ú–∞—Ä–∏—è
–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: +7 937 060 24 63</b>

–ó–≤–æ–Ω–∏—Ç–µ –∏ –ø–∏—à–∏—Ç–µ, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏!

–û–±—ä–µ–∫—Ç—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:
–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤

–ú–∞—Ä–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å —Ü–µ–ª—å—é –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤."""
    bot.send_message(chat_id, text)


def schedule_reminder(chat_id, message_id, time_to_remind, text_of_reminder):
    run_date = datetime.now() + timedelta(minutes=time_to_remind)
    scheduler.add_job(send_reminder, 'date', run_date=run_date, args=[chat_id, text_of_reminder], id=str(message_id))


def schedule_manager(chat_id):
    run_date = datetime.now() + timedelta(minutes=72)
    scheduler.add_job(add_manager, 'date', run_date=run_date, args=[chat_id], id=f"{chat_id}_manager_search")


if __name__ == '__main__':
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except (ConnectionError, ReadTimeout) as e:
        sys.stdout.flush()
        os.execv(sys.argv[0], sys.argv)
    else:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
