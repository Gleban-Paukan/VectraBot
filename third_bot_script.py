import time
import sys
import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from datetime import datetime, timedelta
from telebot import types
from requests import ReadTimeout
import os
import data_base_functions
import config
import text_messages_storage

bot = telebot.TeleBot(config.third_bot_token())
second_bot = telebot.TeleBot(config.second_bot_token())
second_bot.parse_mode = 'html'
bot.parse_mode = 'html'

jobstores = {
    'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')
}
scheduler = BackgroundScheduler(jobstores=jobstores)
scheduler.start()

users_data_to_post = {}
jobs_kinds = {
    1: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
    2: "–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
    3: "–ó–∞–ª–∏–≤–∫–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ / –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –ø–ª–∏—Ç—ã",
    4: "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
    5: "–ú–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
    6: "–ú–æ–Ω—Ç–∞–∂ —Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª–µ–π",
    7: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
    8: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω / –¥–≤–µ—Ä–µ–π"
}


@bot.message_handler(commands=['start'])
def start_message_handler(message):
    data_base_functions.add_admin_id(message.chat.id)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –∑–∞–∫—Ä—ã—Ç–æ–º –∫–ª—É–±–µ <b>¬´–ú–û–ù–¢–ê–ñ–ù–ò–ö–ò –í–ï–ö–¢–†–ê¬ª</b>"
                                      "\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –º–æ–Ω—Ç–∞–∂, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:")
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥.")
    bot.register_next_step_handler(message, register_city)


def register_city(msg):
    users_data_to_post[msg.chat.id] = {"city": msg.text, "square": 0.0, "jobs": "", "address": ""}
    bot.send_message(msg.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª–∏—Ü–∞ –ê–∫–∞–¥–µ–º–∏–∫–∞ –ü–∞–≤–ª–æ–≤–∞, 35 ")
    bot.register_next_step_handler(msg, register_address)


def register_address(msg):
    users_data_to_post[msg.chat.id]["address"] = msg.text
    bot.send_message(msg.chat.id, "–£–∫–∞–∂–∏—Ç–µ <b>–æ–±—ä–µ–º –æ–±—ä–µ–∫—Ç–∞ –≤ –º¬≤</b>")
    bot.register_next_step_handler(msg, register_square)


def register_square(msg):
    if msg.text.isdigit():
        users_data_to_post[msg.chat.id]["square"] = float(msg.text)
        text = """
<b>–£–∫–∞–∂–∏—Ç–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:</b>

1. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
2. –ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
3. –ó–∞–ª–∏–≤–∫–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ / –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –ø–ª–∏—Ç—ã
4. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
5. –ú–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
6. –ú–æ–Ω—Ç–∞–∂ —Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª–µ–π
7. –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
8. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω / –¥–≤–µ—Ä–µ–π\n\n
"""
        bot.send_message(msg.chat.id, text + "–£–∫–∞–∂–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\nEx: 2 5 3")
        bot.register_next_step_handler(msg, register_jobs)
    else:
        bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        bot.register_next_step_handler(msg, register_square)


def register_jobs(msg):
    list_of_jobs_numbers = msg.text.split()
    print(list_of_jobs_numbers)
    if all(num.isdigit() for num in list_of_jobs_numbers):
        if any((int(num) >= 9 or int(num) <= 0) for num in list_of_jobs_numbers):
            bot.send_message(msg.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ü—Ä–∏–º–µ—Ä: 2 5 1.")
            bot.register_next_step_handler(msg, register_jobs)
            return
        users_data_to_post[msg.chat.id]["jobs"] = msg.text
        text = f"""
–í–∏–¥—ã —Ä–∞–±–æ—Ç:
<b>
{'\n'.join([jobs_kinds[int(i)] for i in list_of_jobs_numbers])}
</b>
–û–±—ä–µ–∫—Ç –ø–æ –∞–¥—Ä–µ—Å—É: {users_data_to_post[msg.chat.id]['city']}, {users_data_to_post[msg.chat.id]['address']}
–û–±—ä–µ–º: {users_data_to_post[msg.chat.id]['square']} –º^2
–ê–¥—Ä–µ—Å: {users_data_to_post[msg.chat.id]['address']}

–í—Å—ë –≤–µ—Ä–Ω–æ?
"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ!"), types.KeyboardButton("–ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ!"))
        bot.send_message(msg.chat.id, text, reply_markup=markup)
        return

    bot.send_message(msg.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ü—Ä–∏–º–µ—Ä: 2 5 3.")
    bot.register_next_step_handler(msg, register_jobs)


@bot.message_handler(content_types=['text'])
def text_message_handler(message):
    if message.text == "–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ!":
        text = f"""
–Ø –ø–æ–¥–æ–±—Ä–∞–ª–∞ –≤–∞–º –∫–ª–∏–µ–Ω—Ç–∞!
–ù–∞ —Å–≤—è–∑–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª—É–±–∞ ‚Äî –í–∏—Ä–∞üë∑üèº‚Äç‚ôÄÔ∏è

–ó–∞—è–≤–∫–∞ –Ω–∞ 
<b>
‚Äî{'\n‚Äî'.join([jobs_kinds[int(i)] for i in users_data_to_post[message.chat.id]["jobs"].split()])}
</b>

–û–±—ä–µ–∫—Ç –ø–æ –∞–¥—Ä–µ—Å—É: {users_data_to_post[message.chat.id]['city']}, {users_data_to_post[message.chat.id]['address']}
–û–±—ä–µ–º: {users_data_to_post[message.chat.id]['square']}
"""
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("–í–∑—è—Ç—å –∑–∞–∫–∞–∑ ‚úÖ", callback_data=f"order+/+{message.id}"))
        data_base_functions.add_order(message.id, city=users_data_to_post[message.chat.id]['city'],
                                      square=users_data_to_post[message.chat.id]['square'], jobs=','.join(
                [jobs_kinds[int(i)] for i in users_data_to_post[message.chat.id]["jobs"].split()]),
                                      address=users_data_to_post[message.chat.id]['address'])
        for user_id in data_base_functions.get_ids_for_order_notification(users_data_to_post[message.chat.id]["city"]):
            second_bot.send_message(user_id[0], text, reply_markup=markup)
    if message.text == "–ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ!":
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –æ–±–ª–∞—Å—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–±–æ—Ç—ã")
        bot.register_next_step_handler(message, register_city)


if __name__ == '__main__':
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except (ConnectionError, ReadTimeout) as e:
        sys.stdout.flush()
        os.execv(sys.argv[0], sys.argv)
    else:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
